name: Deploy to prod

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: '1.13.4' # Define the elixir version [required]
        otp-version: '25.0.2' # Define the OTP version [required]
        
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
        
    - name: Install dependencies
      run: mix deps.get
      
    - name: Check code formatting
      run: mix format --check-formatted
      if: always()
      
    - name: Run Credo
      run: mix credo --strict
      # Run Credo even if formatting or the unused deps check failed
      if: always()

  publish:
    name: Publish to DockerHub
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Publish to DockerHub
        uses: elgohr/Publish-Docker-Github-Action@v4
        with:
          name: ${{ secrets.DOCKER_HUB_USERNAME }}/vox:${{ github.sha }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

  deploy_prod:
    name: Deploy to VPS in prod env
    runs-on: ubuntu-latest
    environment: prod
    needs: [build, publish]
    steps:
      - uses: actions/checkout@v2
      - name: Deploy Update
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          KEY: ${{ secrets.SSHKEY }}
          script: |
            docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_TOKEN }}
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/vox:${{ github.sha }}
            (docker stop vox && docker rm vox) || echo "Aucun conteneur vox détecté"
            docker run --env DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }} --name vox -d ${{ secrets.DOCKER_HUB_USERNAME }}/vox:${{ github.sha }}
            docker system prune -af
